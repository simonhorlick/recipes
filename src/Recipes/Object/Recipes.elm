-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Recipes.Object.Recipes exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Recipes.Enum.Ingredients_select_column
import Recipes.InputObject
import Recipes.Interface
import Recipes.Object
import Recipes.Scalar
import Recipes.ScalarCodecs
import Recipes.Union


cover_image_url : SelectionSet String Recipes.Object.Recipes
cover_image_url =
    Object.selectionForField "String" "cover_image_url" [] Decode.string


description : SelectionSet String Recipes.Object.Recipes
description =
    Object.selectionForField "String" "description" [] Decode.string


id : SelectionSet Int Recipes.Object.Recipes
id =
    Object.selectionForField "Int" "id" [] Decode.int


type alias IngredientsOptionalArguments =
    { distinct_on : OptionalArgument (List Recipes.Enum.Ingredients_select_column.Ingredients_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Recipes.InputObject.Ingredients_order_by)
    , where_ : OptionalArgument Recipes.InputObject.Ingredients_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
ingredients :
    (IngredientsOptionalArguments -> IngredientsOptionalArguments)
    -> SelectionSet decodesTo Recipes.Object.Ingredients
    -> SelectionSet (List decodesTo) Recipes.Object.Recipes
ingredients fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Recipes.Enum.Ingredients_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Recipes.InputObject.encodeIngredients_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Recipes.InputObject.encodeIngredients_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "ingredients" optionalArgs object_ (identity >> Decode.list)


type alias IngredientsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Recipes.Enum.Ingredients_select_column.Ingredients_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Recipes.InputObject.Ingredients_order_by)
    , where_ : OptionalArgument Recipes.InputObject.Ingredients_bool_exp
    }


{-| An aggregated array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
ingredients_aggregate :
    (IngredientsAggregateOptionalArguments -> IngredientsAggregateOptionalArguments)
    -> SelectionSet decodesTo Recipes.Object.Ingredients_aggregate
    -> SelectionSet decodesTo Recipes.Object.Recipes
ingredients_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Recipes.Enum.Ingredients_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Recipes.InputObject.encodeIngredients_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Recipes.InputObject.encodeIngredients_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "ingredients_aggregate" optionalArgs object_ identity


instructions : SelectionSet String Recipes.Object.Recipes
instructions =
    Object.selectionForField "String" "instructions" [] Decode.string


name : SelectionSet String Recipes.Object.Recipes
name =
    Object.selectionForField "String" "name" [] Decode.string
