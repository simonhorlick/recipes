-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Recipes.Subscription exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Recipes.Enum.Ingredients_select_column
import Recipes.Enum.Recipes_select_column
import Recipes.InputObject
import Recipes.Interface
import Recipes.Object
import Recipes.Scalar
import Recipes.ScalarCodecs
import Recipes.Union


type alias IngredientsOptionalArguments =
    { distinct_on : OptionalArgument (List Recipes.Enum.Ingredients_select_column.Ingredients_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Recipes.InputObject.Ingredients_order_by)
    , where_ : OptionalArgument Recipes.InputObject.Ingredients_bool_exp
    }


{-| fetch data from the table: "ingredients"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
ingredients :
    (IngredientsOptionalArguments -> IngredientsOptionalArguments)
    -> SelectionSet decodesTo Recipes.Object.Ingredients
    -> SelectionSet (List decodesTo) RootSubscription
ingredients fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Recipes.Enum.Ingredients_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Recipes.InputObject.encodeIngredients_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Recipes.InputObject.encodeIngredients_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "ingredients" optionalArgs object_ (identity >> Decode.list)


type alias IngredientsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Recipes.Enum.Ingredients_select_column.Ingredients_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Recipes.InputObject.Ingredients_order_by)
    , where_ : OptionalArgument Recipes.InputObject.Ingredients_bool_exp
    }


{-| fetch aggregated fields from the table: "ingredients"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
ingredients_aggregate :
    (IngredientsAggregateOptionalArguments -> IngredientsAggregateOptionalArguments)
    -> SelectionSet decodesTo Recipes.Object.Ingredients_aggregate
    -> SelectionSet decodesTo RootSubscription
ingredients_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Recipes.Enum.Ingredients_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Recipes.InputObject.encodeIngredients_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Recipes.InputObject.encodeIngredients_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "ingredients_aggregate" optionalArgs object_ identity


type alias IngredientsByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "ingredients" using primary key columns
-}
ingredients_by_pk :
    IngredientsByPkRequiredArguments
    -> SelectionSet decodesTo Recipes.Object.Ingredients
    -> SelectionSet (Maybe decodesTo) RootSubscription
ingredients_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "ingredients_by_pk" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)


type alias RecipesOptionalArguments =
    { distinct_on : OptionalArgument (List Recipes.Enum.Recipes_select_column.Recipes_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Recipes.InputObject.Recipes_order_by)
    , where_ : OptionalArgument Recipes.InputObject.Recipes_bool_exp
    }


{-| fetch data from the table: "recipes"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
recipes :
    (RecipesOptionalArguments -> RecipesOptionalArguments)
    -> SelectionSet decodesTo Recipes.Object.Recipes
    -> SelectionSet (List decodesTo) RootSubscription
recipes fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Recipes.Enum.Recipes_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Recipes.InputObject.encodeRecipes_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Recipes.InputObject.encodeRecipes_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "recipes" optionalArgs object_ (identity >> Decode.list)


type alias RecipesAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Recipes.Enum.Recipes_select_column.Recipes_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Recipes.InputObject.Recipes_order_by)
    , where_ : OptionalArgument Recipes.InputObject.Recipes_bool_exp
    }


{-| fetch aggregated fields from the table: "recipes"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
recipes_aggregate :
    (RecipesAggregateOptionalArguments -> RecipesAggregateOptionalArguments)
    -> SelectionSet decodesTo Recipes.Object.Recipes_aggregate
    -> SelectionSet decodesTo RootSubscription
recipes_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Recipes.Enum.Recipes_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Recipes.InputObject.encodeRecipes_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Recipes.InputObject.encodeRecipes_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "recipes_aggregate" optionalArgs object_ identity


type alias RecipesByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "recipes" using primary key columns
-}
recipes_by_pk :
    RecipesByPkRequiredArguments
    -> SelectionSet decodesTo Recipes.Object.Recipes
    -> SelectionSet (Maybe decodesTo) RootSubscription
recipes_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "recipes_by_pk" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)
