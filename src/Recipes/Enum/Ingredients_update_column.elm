-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Recipes.Enum.Ingredients_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "ingredients"

  - Additional\_information - column name
  - Amount - column name
  - Amount\_unit - column name
  - Id - column name
  - Name - column name
  - Recipe - column name

-}
type Ingredients_update_column
    = Additional_information
    | Amount
    | Amount_unit
    | Id
    | Name
    | Recipe


list : List Ingredients_update_column
list =
    [ Additional_information, Amount, Amount_unit, Id, Name, Recipe ]


decoder : Decoder Ingredients_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "additional_information" ->
                        Decode.succeed Additional_information

                    "amount" ->
                        Decode.succeed Amount

                    "amount_unit" ->
                        Decode.succeed Amount_unit

                    "id" ->
                        Decode.succeed Id

                    "name" ->
                        Decode.succeed Name

                    "recipe" ->
                        Decode.succeed Recipe

                    _ ->
                        Decode.fail ("Invalid Ingredients_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Ingredients_update_column -> String
toString enum =
    case enum of
        Additional_information ->
            "additional_information"

        Amount ->
            "amount"

        Amount_unit ->
            "amount_unit"

        Id ->
            "id"

        Name ->
            "name"

        Recipe ->
            "recipe"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Ingredients_update_column
fromString enumString =
    case enumString of
        "additional_information" ->
            Just Additional_information

        "amount" ->
            Just Amount

        "amount_unit" ->
            Just Amount_unit

        "id" ->
            Just Id

        "name" ->
            Just Name

        "recipe" ->
            Just Recipe

        _ ->
            Nothing
